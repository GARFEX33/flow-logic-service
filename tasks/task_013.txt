# Task ID: 13
# Title: Implement FlujoOrchestrator
# Status: done
# Dependencies: 5, 8, 9, 10, 11, 12
# Priority: high
# Description: Implement the core `FlujoOrchestrator` logic. This component receives a validated event, identifies its type, retrieves the corresponding handler from the registry, executes the handler, manages the flow state transitions, and incorporates error handling and retry logic.
# Details:
Create the `FlujoOrchestrator` class (e.g., src/application/flujoOrchestrator.ts). This class will depend on the Event Validator (Task 5), Handler Registry (Task 8), Flow State Manager (Task 9), External Service Clients (Task 10), Retry Manager (Task 11), and Error Handling logic (Task 12). Its main method will take an event, validate it, get the handler, execute it within a try-catch block (Task 12), using the Retry Manager (Task 11) for external calls, and update the flow state (Task 9). Use Context7 MCP annotations for the orchestrator class and its main processing method.

# Test Strategy:
Write unit tests for the Orchestrator, mocking its dependencies. Test scenarios including successful handler execution, handler throwing errors (handled by Task 12), handler making external calls (using Task 10 stubs and Task 11 retry), and verifying correct state transitions via the mock State Manager.

# Subtasks:
## 1. Implement FlujoOrchestrator Class [done]
### Dependencies: None
### Description: Develop the FlujoOrchestrator class to handle event validation, handler retrieval, execution, flow state management, and error handling with retry logic.
### Details:
Create the FlujoOrchestrator class in src/application/flujoOrchestrator.ts. This class should have a main method that accepts an event, validates it, retrieves the corresponding handler from the registry, executes it within a try-catch block, manages flow state transitions, and incorporates error handling and retry logic. Ensure that the class depends on the Event Validator (Task 5), Handler Registry (Task 8), Flow State Manager (Task 9), External Service Clients (Task 10), Retry Manager (Task 11), and Error Handling logic (Task 12). Use Context7 MCP annotations for the orchestrator class and its main processing method to facilitate integration with Model Context Protocol (MCP) clients. Refer to the Model Context Protocol documentation for guidance on implementing MCP annotations in TypeScript. ([modelcontextprotocol.io](https://modelcontextprotocol.io/docs/concepts/tools?utm_source=openai))

## 2. Integrate Context7 MCP Annotations [done]
### Dependencies: 13.1
### Description: Add Context7 MCP annotations to the FlujoOrchestrator class and its methods to enable seamless communication with MCP clients.
### Details:
Implement Context7 MCP annotations in the FlujoOrchestrator class and its main processing method to facilitate integration with MCP clients. This involves defining the class and method annotations according to the Model Context Protocol specifications. Refer to the Model Context Protocol documentation for detailed information on implementing MCP annotations in TypeScript. ([modelcontextprotocol.io](https://modelcontextprotocol.io/docs/concepts/tools?utm_source=openai))

## 3. Implement Error Handling and Retry Logic [done]
### Dependencies: 13.1
### Description: Develop error handling and retry mechanisms within the FlujoOrchestrator class to manage failures and ensure reliable operation.
### Details:
Within the FlujoOrchestrator class, implement error handling and retry logic to manage failures during event processing. This includes defining error handling strategies, implementing retry mechanisms, and ensuring that the class can recover from transient errors. Refer to the Model Context Protocol documentation for guidance on error handling in MCP servers. ([modelcontextprotocol.io](https://modelcontextprotocol.io/docs/concepts/tools?utm_source=openai))

